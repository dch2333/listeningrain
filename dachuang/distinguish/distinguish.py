from keras.models import load_model
from PIL import Image
import numpy as np
import gc
import keras

def distinguish_cnn(img_name, model_name):
    keras.backend.clear_session()
    d = {
        1: ['一饼', '正'], 2: ['二饼', '正'], 3: ['三饼', '正'], 4: ['四饼', '正'], 5: ['五饼', '正'], 6: ['六饼', '正'],
        7: ['七饼', '正'], 8: ['八饼', '正'], 9: ['九饼', '正'], 10: ['一条', '正'], 11: ['二条', '正'], 12: ['三条', '正'],
        13: ['四条', '正'], 14: ['五条', '正'], 15: ['六条', '正'], 16: ['七条', '正'], 17: ['八条', '正'], 18: ['九条', '正'],
        19: ['一万', '正'], 20: ['二万', '正'], 21: ['三万', '正'], 22: ['四万', '正'], 23: ['五万', '正'], 24: ['六万', '正'],
        25: ['七万', '正'], 26: ['八万', '正'], 27: ['九万', '正'], 28: ['东', '正'], 29: ['南', '正'], 30: ['西', '正'],
        31: ['北', '正'], 32: ['中', '正'], 33: ['发', '正'], 34: ['白', '正'], 35: ['春', '正'], 36: ['夏', '正'],
        37: ['秋', '正'], 38: ['冬', '正'], 39: ['梅', '正'], 40: ['兰', '正'], 41: ['竹', '正'], 42: ['菊', '正'],
        43: ['', ''], 44: ['', ''], 45: ['一饼', '反'], 46: ['二饼', '反'], 47: ['三饼', '反'], 48: ['四饼', '反'],
        49: ['五饼', '反'], 50: ['六饼', '反'], 51: ['七饼', '反'], 52: ['八饼', '反'], 53: ['九病', '反'], 54: ['一条', '反'],
        55: ['二条', '反'], 56: ['三条', '反'], 57: ['四条', '反'], 58: ['五条', '反'], 59: ['六条', '反'], 60: ['七条', '反'],
        61: ['八条', '反'], 62: ['九条', '反'], 63: ['一万', '反'], 64: ['二万', '反'], 65: ['三万', '反'], 66: ['四万', '反'],
        67: ['五万', '反'], 68: ['六万', '反'], 69: ['七万', '反'], 70: ['八万', '反'], 71: ['九万', '反'], 72: ['东', '反'],
        73: ['南', '反'], 74: ['西', '反'], 75: ['北', '反'], 76: ['中', '反'], 77: ['发', '反'], 78: ['白', '反'],
        79: ['春', '反'], 80: ['夏', '反'], 81: ['秋', '反'], 82: ['冬', '反'], 83: ['梅', '反'], 84: ['兰', '反'],
        85: ['竹', '反'], 86: ['菊', '反']
    }
    im = Image.open(img_name).convert('L')
    mat = np.array(im).reshape(88, 72, 1) / 255
    a = np.array([mat])
    model = load_model(model_name)
    p = list(model.predict(a)[0])
    result = d[p.index(max(p)) + 1]
    del d, im, mat, a, model, p
    gc.collect()
    return result
    # print('概率向量：')
    # print(p)
    # print('对应标签：' + str(p.index(max(p)) + 1))
    # print('对应名称：' + str(d[p.index(max(p)) + 1]))

# distinguish('train/1.jpg','cnn_model.h5')

def distinguish_bp(img_name, model_name):
    keras.backend.clear_session()
    d = {
        1: ['一饼', '正'], 2: ['二饼', '正'], 3: ['三饼', '正'], 4: ['四饼', '正'], 5: ['五饼', '正'], 6: ['六饼', '正'],
        7: ['七饼', '正'], 8: ['八饼', '正'], 9: ['九饼', '正'], 10: ['一条', '正'], 11: ['二条', '正'], 12: ['三条', '正'],
        13: ['四条', '正'], 14: ['五条', '正'], 15: ['六条', '正'], 16: ['七条', '正'], 17: ['八条', '正'], 18: ['九条', '正'],
        19: ['一万', '正'], 20: ['二万', '正'], 21: ['三万', '正'], 22: ['四万', '正'], 23: ['五万', '正'], 24: ['六万', '正'],
        25: ['七万', '正'], 26: ['八万', '正'], 27: ['九万', '正'], 28: ['东', '正'], 29: ['南', '正'], 30: ['西', '正'],
        31: ['北', '正'], 32: ['中', '正'], 33: ['发', '正'], 34: ['白', '正'], 35: ['春', '正'], 36: ['夏', '正'],
        37: ['秋', '正'], 38: ['冬', '正'], 39: ['梅', '正'], 40: ['兰', '正'], 41: ['竹', '正'], 42: ['菊', '正'],
        43: ['', ''], 44: ['', ''], 45: ['一饼', '反'], 46: ['二饼', '反'], 47: ['三饼', '反'], 48: ['四饼', '反'],
        49: ['五饼', '反'], 50: ['六饼', '反'], 51: ['七饼', '反'], 52: ['八饼', '反'], 53: ['九病', '反'], 54: ['一条', '反'],
        55: ['二条', '反'], 56: ['三条', '反'], 57: ['四条', '反'], 58: ['五条', '反'], 59: ['六条', '反'], 60: ['七条', '反'],
        61: ['八条', '反'], 62: ['九条', '反'], 63: ['一万', '反'], 64: ['二万', '反'], 65: ['三万', '反'], 66: ['四万', '反'],
        67: ['五万', '反'], 68: ['六万', '反'], 69: ['七万', '反'], 70: ['八万', '反'], 71: ['九万', '反'], 72: ['东', '反'],
        73: ['南', '反'], 74: ['西', '反'], 75: ['北', '反'], 76: ['中', '反'], 77: ['发', '反'], 78: ['白', '反'],
        79: ['春', '反'], 80: ['夏', '反'], 81: ['秋', '反'], 82: ['冬', '反'], 83: ['梅', '反'], 84: ['兰', '反'],
        85: ['竹', '反'], 86: ['菊', '反']
    }
    im = Image.open(img_name).convert('L')
    mat = np.array(im).reshape(6336) / 255
    a = np.array([mat])
    model = load_model(model_name)
    p = list(model.predict(a)[0])
    result = d[p.index(max(p)) + 1]
    del d, im, mat, a, model, p
    gc.collect()
    return result